cmake_minimum_required(VERSION 3.8)

get_filename_component(CHIF_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include(CMakeFindDependencyMacro)


if (WIN32)
    # TODO: Choose whether to use SDL2 on windows as well
    set(TARGET_NAME CHIFEngine::CHIFEngine_Windows)
    set(LIBDXCOMPILER "dxcompiler.dll")
else ()
    set(TARGET_NAME CHIFEngine::CHIFEngine_Linux)
    find_package(Vulkan REQUIRED)
    find_package(SDL2 REQUIRED)
    find_package(OpenImageDenoise QUIET)
    find_package(Threads REQUIRED)
    if(NOT ${OpenImageDenoise_FOUND})
        message("OpenImageDenoise not found, it will be disabled.")
    else()
        message("OpenImageDenoise Found.")
    endif()

    if(NOT TARGET SDL2::SDL2)
        # using old SDL2 cmake, lets create a SDL2 target ourselves
        find_library(SDL2_LIBRARY_FILE_LOCATION SDL2 REQUIRED)

        add_library(SDL2::SDL2 SHARED IMPORTED)
        set_target_properties(SDL2::SDL2 PROPERTIES
                INTERFACE_INCLUDE_DIRECTORIES ${SDL2_INCLUDE_DIRS}
                INTERFACE_LINK_LIBRARIES ${SDL2_LIBRARIES}
                IMPORTED_LOCATION ${SDL2_LIBRARY_FILE_LOCATION}
                )

        unset(SDL2_LIBRARY_FILE_LOCATION)
    endif()
    set(LIBDXCOMPILER "libdxcompiler.so")
endif()

if (NOT TARGET CHIFEngine::CHIFEngine)
    include("${CHIF_CMAKE_DIR}/CHIFEngineTargets.cmake")
    add_library(CHIFEngine::CHIFEngine ALIAS ${TARGET_NAME})

    set(CHIFEngine_SHADER_DIR "@_CONFIG_INSTALL_DIR_INCLUDE@/CHIFEngine/shaders/")
    target_compile_definitions(${TARGET_NAME} INTERFACE "CHIFENGINE_SHADER_DIR=\"${CHIFENGINE_SHADER_DIR}\"")

    add_library(CHIFEngine::dxcompiler SHARED IMPORTED)
    set_property(TARGET CHIFEngine::dxcompiler PROPERTY
            IMPORTED_LOCATION "@_CONFIG_INSTALL_DIR_LIB@/CHIFEngine/${LIBDXCOMPILER}" )
endif()

set(CHIFEngine_LIBRARIES CHIFEngine::CHIFEngine ${TARGET_NAME})
